server:
    port: 10004
grpc:
    server:
        port: 10014
    client:
        comnfunc:
            host: ${env.rpchost}
            port: 10016
spring:
    autoconfigure:
        exclude:
            - org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration
            - org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration
    datasource:
        password: wensheng
        url: jdbc:mysql://${env.dbhost}:3306/ZCC_CUST?useUnicode=true&characterEncoding=utf-8&cachePrepStmts=true&useServerPrepStmts=true&rewriteBatchedStatements=true
        username: wenshengcust
        driverClassName: com.mysql.cj.jdbc.Driver
        filters: stat
        maxActive: 20
        initialSize: 1
        maxWait: 60000
        minIdle: 1
        timeBetweenEvictionRunsMillis: 60000
        minEvictableIdleTimeMillis: 300000
        validationQuery: select 'x'
        testWhileIdle: true
        testOnBorrow: false
        testOnReturn: false
        poolPreparedStatements: true
        maxOpenPreparedStatements: 20

    security:
        oauth2:
            client:
                registration:
                    sample:
                        client-id: sampleClientId
                        authorizedGrantTypes: implicit
                        scops: read,write
                        accessTokenValiditySeconds: 3600
                    amc-client-thirdpart:
                        client-id: amcClient3rdPartId
                        secret: secret
                        scopes: thirdpart, read
                        authorizedGrantTypes: implicit, refresh_token, client_credentials
                        redirectUris: admin,http://${env.oauth2.host}:10003/amc/login, http://${env.oauth2.host}:8080/login/oauth2/code/custom, http://${env.oauth2.host}:8080/ui-thymeleaf/login/oauth2/code/custom, http://${env.oauth2.host}:8080/authorize/oauth2/code/bael, http://${env.oauth2.host}:8080/login/oauth2/code/bael
                    amc-admin:
                        client-id: amcAdminId
                        secret: secret
                        scopes: amcAdmin,amcClient,read,write
                        authorizedGrantTypes: password, authorization_code, refresh_token, client_credentials
                        redirectUris: admin,http://${env.oauth2.host}:10003/amc/login, http://${env.oauth2.host}:8080/login/oauth2/code/custom, http://${env.oauth2.host}:8080/ui-thymeleaf/login/oauth2/code/custom, http://${env.oauth2.host}:8080/authorize/oauth2/code/bael, http://${env.oauth2.host}:8080/login/oauth2/code/bael
                    amc-cust-client:
                        client-id: amcClientId
                        secret: secret
                        scopes: amcClient,read,write
                        redirectUris: client,http://${env.oauth2.host}:10003/amc/login
                        authorizedGrantTypes: password, authorization_code, refresh_token, client_credentials

    kafka:
        consumer:
            group-id: grp-zcc-cust
            auto-offset-reset: earliest
        # change this property if you are using your own
        # Kafka cluster or your Docker IP is different
        bootstrap-servers: ${env.kfkhost}:9092
    data:
        mongodb:
            database: wszcc_cust
            host: 10.20.100.235
            port: 27017
    cache:
        cache-names: regionName
        caffeine:
            spec: maximumSize=500, expireAfterAccess=120s

    task:
        scheduling:
            thread-name-prefix: synchWithScrapySystem
            cronExprTrd: 0 0 6,12,18,23 * * *
            cronExprCust: 0 0 7,13,19,0 * * *
            cronExprGeo: 0 0 7,13,19,0 * * *
            pool:
                size: 3


    servlet:
        multipart:
            enabled: true
            file-size-threshold: 1MB
            max-request-size: 10MB
            max-file-size: 200MB
            location: ${env.image-repo}

mybatis:
    type-aliases-package: com.wensheng.zcc.cust.module
    mapper-locations:
        - classpath:mappers/*Mapper.xml
        - classpath:mappers/ext/*Mapper.xml



weixin:
#    appId: wxdb885be2c95a5b32
#    appSecret: 279bfb3dd9d3e5eb43c480f625afdc0b
#    get_token_url: https://api.weixin.qq.com/cgi-bin/token
#    get_qrcode_url: https://api.weixin.qq.com/wxa/getwxacodeunlimit
    appId: wx43360e750e7099b9
    appSecret: e08507e5865fe1315e403d011693253f
    loginUrl: https://api.weixin.qq.com/sns/jscode2session?appid=${weixin.appId}&secret=${weixin.appSecret}&js_code=JSCODE&grant_type=authorization_code
    get_token_url: https://api.weixin.qq.com/cgi-bin/token
    get_qrcode_url: https://api.weixin.qq.com/wxa/getwxacodeunlimit

message:
    url: http://esms100.10690007.net/sms/mt
    spid: 9346
    sppassword: xuKh9a8u
    commond: MT_REQUEST
    multiCommond: MULTI_MT_REQUEST

kafka:
    topic_wechatuser: topic_wechatuser_${env.env-hint}

logging:
    level:
        com:
            wensheng: TRACE
        root: WARN
cust:
    syncUrls:
        debtTradeResources: http://10.20.200.100:8085/debtTradeResources/getJson?page=%d&rows=%d&trdProvinceCode=%s
        getCompanyInfoById: http://10.20.200.100:8085/debtTradeCompanys/getCompanyInfoById/%s
        getTrdById: http://10.20.200.100:8085/debts/get/%s
#        http://10.20.200.100:8085/debtTradeCompanys/getCompanyInfoByName/深圳市恒志投资有限公司
        getCompanyInfoByUpdateTime: http://10.20.200.100:8085/debtTradeCompanys/getCompanyInfoByUpdateTime?page=%d&rows=%d&updateFromDate=%s&provinceCode=%s
        getPersonInfoById: http://10.20.200.100:8085/debtTradePersons/getPersonInfoById/%s
#        http://10.20.200.100:8085/debtTradePersons/getPersonInfoByNameAndTel/陈新启/13605885631
        getPersonInfoByUpdateTime: http://10.20.200.100:8085/debtTradePersons/getPersonInfoByUpdateTime?page=%d&rows=%d&updateFromDate=%s&provinceCode=%s


env:
    env-hint: dev
    dbhost: 10.20.100.70
    rpchost: localhost
    kfkhost: 10.20.100.238
    image-repo: /disk/temp
    oauth2:
        host: localhost
        authLink: http://${env.oauth2.host}:10002